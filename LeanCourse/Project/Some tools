Searching for lemmata:
#* Use tactics with a question mark to find a lemma.
#  - `exact?` tries to apply a *single* lemma from the library to prove the current goal.
#  - `apply?` tries to find all lemmas that can be used with `apply` to the current goal.
#  - `rw?` tries to find all lemmas that can be used with `rw` to the current goal.
#  - `have? using h1 h2` tries to find all facts that can be concluded from
#    a single lemma using h1 and h2.
#  - `simp?` simplifies the goal using `simp` and prints all used lemmas.

#* Use `#leansearch "<query>."` to query theorems in natural language.
  #Or use its website https://leansearch.net/

#* Use `#loogle <query>` to query using syntactic searches
#  The website https://loogle.lean-lang.org/ contains many search examples

#* Guess the name of the lemma
#  - You can search lemmas in the API documentation:
#    https://leanprover-community.github.io/mathlib4_docs/
#  - When typing a name, a list of suggested completions automatically shows up
#  - You can also press `ctrl-space` (or `cmd-space` on a Mac) to see the list of suggestions.
#  - Pressing `ctrl-space` toggles the display of the documentation of the selected completion.
#  - You can also press `ctrl-T` (or `cmd-T`) to search for a lemma name (choosing an option shows you where it is proven)

#  Some naming conventions:
#  - a theorem named `A_of_B_of_C` establishes something of the form `A`
#    from hypotheses of the form `B` and `C`.
#  - `A`, `B`, and `C` approximate the way we might read the statement out loud.
#  - Example: a theorem showing `x + y ≤ ...` will probably start with `add_le`.
#    After typing `add_le` the autocomplete will give you some helpful choices.

#* You can browse Mathlib
#If you ctrl-click on a definition or theorem in VS Code you will jump
#to the file where the theorem is proven.
#You can often find similar theorems nearby the theorem you searched for.

#loogle _ * _ < _ * _ ↔ _ --> to search for equations of a certain form

On arguments (specialize, apply, etc.)
#Note the use of specialize for instantation:
#example (f g : ℝ → ℝ) (hg : Injective g)
#    (hf : Injective f) :
#    Injective (g ∘ f) := by {
#  unfold Injective
#  simp
#  -- intro (x : ℝ) (y : ℝ)
#  intro x y h
#  unfold Injective at hf hg
#  -- have h_new : f x = f y := hg (f x) (f y) h
#  specialize hg (f x) (f y) h
#  specialize hf x y hg
#  exact hf
#  }

#* If `h : P ∧ Q`, the tactic `obtain ⟨hP, hQ⟩ := h` or `rcases h with ⟨hP, hQ⟩`
#  gives two new assumptions `hP : P` and `hQ : Q`.
#* If `h : P ↔ Q`, the tactic `obtain ⟨hPQ, hQP⟩ := h`
#  gives two new assumptions `hPQ : P → Q` and `hQP : Q → P`.

#In order to make use of an assumption
#  `h : P ∨ Q`
#we use the obtain tactic:
#  `obtain hP|hQ := h` or `rcases h with (hP, hQ)`
# which creates two proof branches: one branch assuming `hP : P`,
#and one branch assuming `hQ : Q`.

#We can use classical reasoning (with the law of the excluded middle)
#using the following tactics.

#* `by_contra h` start a proof by contradiction.
#* `by_cases h : p` to start a proof by cases on statement `p`.
#* `push_neg` to push negations inside quantifiers and connectives.

#subst y : substitute a variable y in the goal by its value/expression from an assumption

#"rw[h] at" (rewrite): h is an equation, and this tactic replaces the left-hand-side expression by the right-hand-side expression in the goal
#"linarith": uses whatever hypotheses are already given, and links them through linear expressions to reach the goal; note: to feed linarith additional data without needing to declaring a new hypothesis, we use brackets: "linarith [le_of_le h]"
#"gcongr": similar to linarith, but: + it can work on non-linear equations, - it does not know how to manipulate expressions, and only replaces exact facts
#"rcases h with \<x,h'\>": where h is some existential quantifier, it creates a variable x to assign it the proposition h' given by h
#"\<x, h'\>": for instance, in proving an existential statement, this is a constructive proof giving an example; to be used without by
#"by_contra h": introduces a proof by contradiction, by setting as hypothesis the negation of the goal
#"push_neg": pushes the negation inside a quantified proposition
#"unfold": reveals a proposition
#"simp" : simplifies expressions
#"dsimp only [ ]": unfolds a definition inside a formula
#"constructor": splits a proposition into its components (either a conjunction, a bi-implication, etc.); can be replaced by "rcases h with <>"
#"contrapose": gets the contraposition of the goal
#"contrapose!": gets the contraposition of the goal + pushes negation
#"exfalso": allows us to prove anything follow from a contradiction
#"absurd h h'": establishes any proposition when h and h' are negations of each other
#"contradiction": allows us to closed an argument by contradiction by looking for any contradictory hypotheses
#right" and "left": to prove either the left or right side of a disjunction
#"Or.inl" and "Or.inr": similar
#"rcases h with h0 | h1": splits a disjunction
#"cases h case inl h0 => case inr h1 =>": similar
#"cases ... next ... next": similar
#"cases em P": law of excluded middle
#"by_cases h : P": similar, assigns a name to each case
#"ext": prove two functions are identical if they have the same value at each argument
#"convert (theorem _) h": allows us to rewrite the goal so that it has the form in which we can apply a theorem
#"use": to prove an existential result by using an instance
#"obtain <> := h": much like we use "rcases with" for existential statements, we can use the obtain tactic to extract information from a hypothesis h
#"specialize h x_in_s": where h is a statement about a set s containing x; the specialize tactic applies whatever h is telling about s, to x
#"Classical.choose": the axiom of choice; we apply this to an existential statement, and it gives us an instance
#"Classical.choose_spec": similar, with spec-
#"apply Subset.antisymm": to prove two sets are equal by showing they contain each other
#"rwa": use rewrite followed by the assumption
#"all_goals" or "<;>": to get an argument for all goals at the same time

On tactics:
#Some useful tactics when dealing with numbers:
#* `norm_num`: compute equalities and inequalities involving numerals
#* `omega`: can do linear arithmetic (usually better than `linarith`) on `ℕ` and `ℤ`.
#* `positivity`: can show that something is positive/non-negative
#  by using that its components are positive/non-negative.
#* `field_simp` can simplify divisions (often useful before ring).

#Some tactics that are useful when working with coercions:
#* `norm_cast`: pull coercions out of an expression.
#  E.g. turn `↑n * ↑m + ↑k` into `↑(n * m + k)`
#* `push_cast`: push coercions into an expression.
#  E.g. turn `↑(n * m + k)` into `↑n * ↑m + ↑k`
#Also note that (n : ℚ) tells Lean to treat n as a rational number rather than an integer

#Some tactics on algebraic structures:
#group --> on groups
#abel --> on abelian groups
#noncomm_ring --> on (non-commutative) rings
#ring --> on commutative rings

On sets:
#example (s : Set ι) (C : ι → Set α) :
#    ⋃ i ∈ s, C i = {x : α | ∃ i ∈ s, x ∈ C i} := by ext; simp

#`f ⁻¹' s` is the preimage of `s` under `f`.
#`f '' s` is the image of `s` under `f`.

On functions
#Defining functions: some examples
#def fac : ℕ → ℕ
#  | 0       => 1
#  | (n + 1) => (n + 1) * fac n

#  let L : Set α × Set β → Set γ := fun (s,t) => (f '' s) ∪ (g '' t)
#  let G : Set α × Set β → Set γ := λ s => (f '' s.1) ∪ (g '' s.2)
#  let f (s : Set α × Set β) : Set γ := (f '' s.1) ∪ (g '' s.2)

#On derivatives:
# deriv f x : computes the derivative of `f` at `x`
# HasDerivAt f y x : states that `f` is differentiable and `f'(x) = y`
# DifferentiableAt ℝ f x : states that `f` is differentiable at `x`
# #check HasDerivAt.add
#check deriv_add
#check DifferentiableAt.add
#There are various variations of derivatives/being differentiable -/

# Differentiable f : A function `f` is differentiable everywhere.
# DifferentiableOn f s : A function `f` is differentiable on a subset `s`
# DifferentiableWithinAt f s x : A function `f` is differentiable at a point `x`, considered only within the subset `s`


/- We can also consider the derivative only within a subset. -/
#check HasDerivWithinAt
#check derivWithin



Using induction:
#example (n : ℕ) : ∑ i in range (n + 1), (i : ℚ) = n * (n + 1) / 2 := by {
#  induction n with
#  | zero => simp
#  | succ n ih =>
#    rw [Finset.sum_range_succ, ih]
#    field_simp
#    ring
#  }

#/- Some other useful induction principles -/
#check Nat.le_induction
#check Nat.twoStepInduction
#check Nat.strongRec

#We can use other induction principles with `induction ... using ... with`

#theorem fac_dvd_fac (n m : ℕ)
#    (h : n ≤ m) : fac n ∣ fac m := by {
#  induction m, h using Nat.le_i#nduction with
#  | base => rfl
#  | succ k hk ih =>
#    rw [fac]
#    exact Dvd.dvd.mul_left ih (k + 1)
#  }

Defining structures
#structure PosPoint where
#  x : ℝ
#  y : ℝ
#  z : ℝ
#  x_pos : 0 < x
#  y_pos : 0 < y
#  z_pos : 0 < z

#def PointPoint.add (a b : PosPoint) : PosPoint :=
#{ x := a.x + b.x
#  y := a.y + b.y
#  z := a.z + b.z
#  x_pos := by apply add_pos; exact a.x_pos; exact b.x_pos
#  y_pos := by linarith [a.y_pos, b.y_pos]
#  z_pos := by linarith [a.z_pos, b.z_pos] }

#/- Going from `Point` to `PosPoint` has code duplication.
#We don't want this when defining monoids, groups, rings, fields. -/

#structure PosPoint' extends Point where
#  x_pos : 0 < x
#  y_pos : 0 < y
#  z_pos : 0 < z

#Using `class` instead of `structure` tells Lean to
#create a database of "instances of this class".
#The `instance` command allows to add entries to this database.

Some algebraic structures:
#check Monoid --> (multiplicative) monoids
#check AddMonoid --> (additive) monoids
#check CommMonoid --> commutative (multiplicative) monoids
#check AddCommMonoid --> commutative (additive) monoids
#check Group --> (multiplicative) groups
#`G ≃* H` says that the groups `G` and `H` isomorphic.
#check AddGroup --> (additive) groups
#check CommGroup --> (multiplicative) abelian groups
#check AddCommGroup --> (additive) abelian groups
#check Ring --> rings
#`R ≃+* S` says that the rings `R` and `S` isomorphic.
#check Ideal --> ideals
#check CommRing --> commutative rings
#check EuclideanDomain --> euclidean domains
#check Field --> fields
#check Algebra --> associative unital algebras
#check Module --> modules
#variable {K V : Type*} [Field K] [AddCommGroup V] [Module K V] -->
#to defined a vector space (as the module of a commutative additive group under a field)

#Classes of morphisms:
#`α →* β` denotes the type of group (or in general, monoid) homomorphisms from `α` to `β`.
#`α →+* β` denotes the type of ring homomorphisms from `α` to `β`.
#`M →ₗ[R] N` denotes the type of R-module morphisms from `M` to `N`.


Bijections:
#  /-- `α ≃ β` is the type of functions from `α → β` with a two-sided inverse. -/
#structure Equiv (α : Sort*) (β : Sort _) where
#  protected toFun : α → β
#  protected invFun : β → α
#  protected left_inv : LeftInverse invFun toFun
#  protected right_inv : RightInverse invFun toFun

#ext <;> : to solve several goals at the same time


Some useful lemmata
#check (le_refl : ∀ a : ℝ, a ≤ a)
#check (le_trans : a ≤ b → b ≤ c → a ≤ c)
#check (le_antisymm : a ≤ b → b ≤ a → a = b)

#check (add_le_add : a ≤ b → c ≤ d → a + c ≤ b + d)
#check (mul_le_mul : a ≤ b → c ≤ d → 0 ≤ c → 0 ≤ b → a * c ≤ b * d)
#check (mul_le_mul_of_nonneg_right : b ≤ c → 0 ≤ a → b * a ≤ c * a)

#check exp_le_exp

#lt_irrefl  : ¬a < a

#check mem_inter_iff x s t : x ∈ s ∩ t ↔ x ∈ s ∧ x ∈ t
#check mem_union x s t : x ∈ s ∪ t ↔ x ∈ s ∨ x ∈ t
#check mem_compl_iff s x : x ∈ sᶜ ↔ x ∉ s

#check mem_univ x : x ∈ univ
#check not_mem_empty x : x ∉ ∅

#subset_antisymm : s ⊆ t → t ⊆ s → s = t

#check powerset s

#check mul_div_cancel_right -- group-like
#check mul_div_cancel_right₀ -- ring-like
#check mul_le_mul_left' -- group-like
#check mul_le_mul_left -- ring-like
#check mul_le_mul_of_nonneg_left -- ring-like
#"{ι : Type*} [Fintype ι] ": here Fintype is a class (i.e. a structure) on the type (i.e. set) \iota which requires that \iota is finite
#"C r" is the homomorphism taking r to rX in the polynomial ring of R (here C stands for coefficient)
#"Polynomial.coeff n": gives the n-th coefficient in the polynomial
#"compute_degree!": the question mark allows us to consider all coefficients at once
#"aeval R A x" is the unique R-algebra homomorphism from R[X] to A sending X to x (where A is an algebra over R)
#for instance "aeval 2 (x^2-3)" yields 2^2-3=1
#"Fin n": set of the first n natural numbers

On commands:
# #print diff ---> def diff : PosReal → PosReal → ℝ := fun x y ↦ ↑x - ↑y
#ie use `#print` to print explicit definitions


TendsTo f F G --> lim f(x) = y (here F is a filter of x and G a filter of y)-/

Lean has the following names for intervals
("c" = closed, "o" = open, "i" = infinity)
Icc a b = [a, b]
Ico a b = [a, b)
Ioc a b = (a, b]
Ioo a b = (a, b)
Ici a   = [a, ∞)
Ioi a   = (a, ∞)
Iic b   = (-∞, b]
Iio b   = (-∞, b)

/- the notation `[[a, b]]` (in namespace `Interval`) means
`uIcc a b`, i.e. the interval from `min a b` to `max a b` -/
